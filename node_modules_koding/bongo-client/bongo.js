'use strict';
/*
Bongo.js
Unfancy models for MongoDB

(c) 2011 Koding, Inc.

@module: bongo-client
@author: Christopher Thorn <chris@koding.com>
*/

/*
@snippet.
@description: feature-detect the browser.
@todo: is there an improvement?
@foo
*/

var Bongo, EventEmitter, isBrowser,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
  __slice = [].slice;

isBrowser = 'undefined' != typeof window;

/*
@class: bongo (client)
@description: client-side bongo.
*/


EventEmitter = require('microemitter').EventEmitter;

Bongo = (function(_super) {
  var CONNECTED, CONNECTING, DISCONNECTED, EventBus, JsPath, Model, NOTCONNECTED, OpaqueType, Scrubber, Store, Traverse, addGlobalListener, createBongoName, createId, dash, extend, getEventChannelName, getRevivingListener, race, sequence, slice, _ref, _ref1, _ref2, _ref3;

  __extends(Bongo, _super);

  _ref = [0, 1, 2, 3], NOTCONNECTED = _ref[0], CONNECTING = _ref[1], CONNECTED = _ref[2], DISCONNECTED = _ref[3];

  Traverse = require('traverse');

  createId = Bongo.createId = require('hat');

  JsPath = Bongo.JsPath = require('jspath');

  Bongo.dnodeProtocol = require('koding-dnode-protocol');

  Bongo.dnodeProtocol.Scrubber = require('./src/scrubber');

  _ref1 = Bongo.dnodeProtocol, Store = _ref1.Store, Scrubber = _ref1.Scrubber;

  Bongo.EventEmitter = EventEmitter;

  Model = Bongo.Model = require('./src/model');

  Bongo.ListenerTree = require('./src/listenertree');

  EventBus = Bongo.EventBus = require('./src/eventbus');

  OpaqueType = require('./src/opaquetype');

  Model.prototype.mixin(require('./src/eventemitter/broker'));

  Model.prototype.off = Model.prototype.removeListener;

  Model.prototype.addGlobalListener = Model.prototype.on;

  slice = [].slice;

  extend = require('./src/util').extend;

  _ref2 = require('sinkrow'), race = _ref2.race, sequence = _ref2.sequence, dash = _ref2.dash;

  _ref3 = require('sinkrow'), Bongo.daisy = _ref3.daisy, Bongo.dash = _ref3.dash, Bongo.sequence = _ref3.sequence, Bongo.race = _ref3.race;

  Bongo.bound = require('koding-bound');

  Bongo.prototype.bound = require('koding-bound');

  createBongoName = function(resourceName) {
    return "" + (createId(128)) + ".unknown.bongo-" + resourceName;
  };

  function Bongo(options) {
    var _this = this;
    EventEmitter(this);
    this.mq = options.mq, this.getSessionToken = options.getSessionToken, this.getUserArea = options.getUserArea, this.fetchName = options.fetchName, this.resourceName = options.resourceName, this.precompiledApi = options.precompiledApi;
    if (this.getUserArea == null) {
      this.getUserArea = function() {};
    }
    this.localStore = new Store;
    this.remoteStore = new Store;
    this.readyState = NOTCONNECTED;
    this.stack = [];
    this.eventBus = new EventBus(this.mq);
    this.mq.on('message', this.bound('handleRequestString'));
    this.mq.on('disconnected', function() {
      _this.disconnectedAt = Date.now();
      _this.emit('disconnected');
      return _this.readyState = DISCONNECTED;
    });
    this.opaqueTypes = {};
    this.on('newListener', function(event, listener) {
      if (event === 'ready' && _this.readyState === CONNECTED) {
        return process.nextTick(function() {
          _this.emit('ready');
          return _this.off('ready');
        });
      }
    });
  }

  Bongo.prototype.cacheable = require('./src/cacheable');

  Bongo.prototype.createRemoteApiShims = function(api) {
    var instance, name, options, shimmedApi, statik, _ref4;
    shimmedApi = {};
    for (name in api) {
      if (!__hasProp.call(api, name)) continue;
      _ref4 = api[name], statik = _ref4.statik, instance = _ref4.instance, options = _ref4.options;
      shimmedApi[name] = this.createConstructor(name, statik, instance, options);
    }
    return shimmedApi;
  };

  Bongo.prototype.wrapStaticMethods = (function() {
    var optimizeThese;
    optimizeThese = ['on', 'off'];
    return function(constructor, constructorName, statik) {
      var bongo;
      bongo = this;
      return statik.forEach(function(method) {
        if (__indexOf.call(optimizeThese, method) >= 0) {
          method += '_';
        }
        return constructor[method] = function() {
          var rest, rpc;
          rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
          rpc = {
            type: 'static',
            constructorName: constructorName,
            method: method
          };
          return bongo.send(rpc, rest);
        };
      });
    };
  })();

  Bongo.prototype.wrapInstanceMethods = (function() {
    var optimizeThese;
    optimizeThese = ['on', 'addListener', 'off', 'removeListener', 'save'];
    return function(constructor, constructorName, instance) {
      var bongo;
      bongo = this;
      return instance.forEach(function(method) {
        if (__indexOf.call(optimizeThese, method) >= 0) {
          method += '_';
        }
        return constructor.prototype[method] = function() {
          var data, id, rpc;
          id = this.getId();
          if (id == null) {
            data = this.data;
          }
          rpc = {
            type: 'instance',
            constructorName: constructorName,
            method: method,
            id: id,
            data: data
          };
          return bongo.send(rpc, [].slice.call(arguments));
        };
      });
    };
  })();

  Bongo.prototype.registerInstance = function(inst) {
    var _this = this;
    inst.on('listenerRemoved', function(event, listener) {
      return _this.eventBus.off(inst, event, listener.bind(inst));
    });
    return inst.on('newListener', function(event, listener) {
      return _this.eventBus.on(inst, event, listener.bind(inst));
    });
  };

  getEventChannelName = function(name) {
    return "event-" + name;
  };

  getRevivingListener = function(bongo, ctx, listener) {
    return function() {
      var rest;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      return listener.apply(ctx, bongo.revive(rest));
    };
  };

  addGlobalListener = function(konstructor, event, listener) {
    var _this = this;
    return this.eventBus.staticOn(konstructor, event, function() {
      var rest, revived;
      rest = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
      revived = _this.revive(rest);
      return listener.apply(konstructor, revived);
    });
  };

  Bongo.prototype.reviveType = function(type, shouldWrap) {
    var revived, _base, _ref4, _ref5;
    if (Array.isArray(type)) {
      return this.reviveType(type[0], true);
    }
    if ('string' !== typeof type) {
      return type;
    }
    revived = (_ref4 = (_ref5 = this.api[type]) != null ? _ref5 : window[type]) != null ? _ref4 : (_base = this.opaqueTypes)[type] != null ? (_base = this.opaqueTypes)[type] : _base[type] = new OpaqueType(type);
    if (shouldWrap) {
      return [revived];
    } else {
      return revived;
    }
  };

  Bongo.prototype.reviveSchema = (function() {
    var isArray, keys, reviveSchema, reviveSchemaRecursively;
    keys = Object.keys;
    isArray = Array.isArray;
    reviveSchemaRecursively = function(bongo, schema) {
      return (keys(schema)).map(function(slot) {
        var type;
        type = schema[slot];
        if ((type && 'object' == typeof type) && !isArray(type)) {
          type = reviveSchemaRecursively(bongo, type);
        }
        return [slot, type];
      }).reduce(function(acc, _arg) {
        var slot, type;
        slot = _arg[0], type = _arg[1];
        acc[slot] = bongo.reviveType(type);
        return acc;
      }, {});
    };
    return reviveSchema = function(schema) {
      return reviveSchemaRecursively(this, schema);
    };
  })();

  Bongo.prototype.reviveOption = function(option, value) {
    switch (option) {
      case 'schema':
        return this.reviveSchema(value);
      default:
        return value;
    }
  };

  Bongo.prototype.createConstructor = function(name, staticMethods, instanceMethods, options) {
    var konstructor,
      _this = this;
    konstructor = Function('bongo', "return function " + name + " () {\n  bongo.registerInstance(this);\n  this.init.apply(this, [].slice.call(arguments));\n  this.bongo_.constructorName = '" + name + "';\n}")(this);
    EventEmitter(konstructor);
    this.wrapStaticMethods(konstructor, name, staticMethods);
    __extends(konstructor, Model);
    konstructor.prototype.updateInstanceChannel = this.updateInstanceChannel;
    konstructor.on('newListener', addGlobalListener.bind(this, konstructor));
    process.nextTick(function() {
      var option, _results;
      _results = [];
      for (option in options) {
        if (!__hasProp.call(options, option)) continue;
        _results.push(konstructor[option] = _this.reviveOption(option, options[option]));
      }
      return _results;
    });
    this.wrapInstanceMethods(konstructor, name, instanceMethods);
    return konstructor;
  };

  Bongo.prototype.getInstancesById = function() {};

  Bongo.prototype.getInstanceMethods = function() {
    return ['changeLoggedInState', 'updateSessionToken'];
  };

  Bongo.prototype.revive = function(obj) {
    var bongo, hasEncoder;
    bongo = this;
    hasEncoder = (typeof Encoder !== "undefined" && Encoder !== null ? Encoder.XSSEncode : void 0) != null;
    return new Traverse(obj).map(function(node) {
      var constructorName, instance, instanceId, konstructor, _ref4;
      if ((node != null ? node.bongo_ : void 0) != null) {
        _ref4 = node.bongo_, constructorName = _ref4.constructorName, instanceId = _ref4.instanceId;
        instance = bongo.getInstancesById(instanceId);
        if (instance != null) {
          return this.update(instance, true);
        }
        konstructor = bongo.api[node.bongo_.constructorName];
        if (konstructor == null) {
          return this.update(node);
        } else {
          return this.update(new konstructor(node));
        }
      } else if (hasEncoder && 'string' === typeof node) {
        return this.update(Encoder.XSSEncode(node));
      } else {
        return this.update(node);
      }
    });
  };

  Bongo.prototype.reviveFromSnapshots = (function() {
    var snapshotReviver;
    snapshotReviver = function(k, v) {
      if (k === '_events') {
        return;
      }
      return v;
    };
    return function(instances, callback) {
      var results,
        _this = this;
      results = instances.map(function(instance) {
        var e, revivee;
        revivee = null;
        try {
          if (instance.snapshot != null) {
            revivee = JSON.parse(instance.snapshot, snapshotReviver);
          }
        } catch (_error) {
          e = _error;
          console.warn("couldn't revive snapshot! " + instance._id);
          revivee = null;
        }
        if (!revivee) {
          return null;
        }
        return _this.revive(revivee);
      });
      results = results.filter(Boolean);
      return callback(null, results);
    };
  })();

  Bongo.prototype.handleRequestString = function(messageStr) {
    var e;
    return this.handleRequest((function() {
      try {
        return JSON.parse(messageStr);
      } catch (_error) {
        e = _error;
        return messageStr;
      }
    })());
  };

  Bongo.prototype.handleRequest = function(message) {
    var callback, context, method, revived, scrubber, unscrubbed,
      _this = this;
    if ((message != null ? message.method : void 0) === 'defineApi' && (this.api == null)) {
      return this.defineApi(message["arguments"][0]);
    } else if ((message != null ? message.method : void 0) === 'handshakeDone') {
      return this.handshakeDone();
    } else {
      method = message.method, context = message.context;
      scrubber = new Scrubber(this.localStore);
      unscrubbed = scrubber.unscrub(message, function(callbackId) {
        if (!_this.remoteStore.has(callbackId)) {
          _this.remoteStore.add(callbackId, function() {
            var args;
            args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
            return _this.send(callbackId, args);
          });
        }
        return _this.remoteStore.get(callbackId);
      });
      revived = this.revive(unscrubbed);
      if (__indexOf.call(this.getInstanceMethods(), method) >= 0) {
        return this[method].apply(this, revived);
      } else if (!isNaN(+method)) {
        callback = this.localStore.get(method);
        return callback != null ? callback.apply(null, revived) : void 0;
      } else if (method !== 'auth.authOk') {
        return console.warn('Unhandleable message; dropping it on the floor.');
      }
    }
  };

  Bongo.prototype.reconnectHelper = function() {
    if (this.api != null) {
      this.readyState = CONNECTED;
      return this.emit('ready');
    }
  };

  Bongo.prototype.connectHelper = function(callback) {
    var _this = this;
    if (callback != null) {
      this.mq.once('connected', callback.bind(this));
    }
    this.channelName = createBongoName(this.resourceName);
    this.channel = this.mq.subscribe(this.channelName, {
      connectDirectly: true
    });
    this.channel.exchange = this.resourceName;
    this.channel.setAuthenticationInfo({
      serviceType: 'bongo',
      name: this.resourceName,
      clientId: this.getSessionToken()
    });
    this.channel.off('message', this.bound('handleRequest'));
    this.channel.on('message', this.bound('handleRequest'));
    this.reconnectHelper();
    this.channel.once('broker.subscribed', function() {
      return _this.stack.forEach(function(fn) {
        return fn.call(_this);
      });
    });
    return this.channel.on('broker.subscribed', function() {
      _this.emit('connected');
      if (_this.disconnectedAt) {
        _this.emit('reconnected', {
          disconnectedFor: Date.now() - _this.disconnectedAt
        });
        _this.disconnectedAt = null;
      }
      if (_this.lastMessage) {
        _this.channel.publish(_this.lastMessage);
        return _this.lastMessage = null;
      }
    });
  };

  Bongo.prototype.connect = function(callback) {
    var _this = this;
    switch (this.readyState) {
      case CONNECTED:
      case CONNECTING:
        return "already connected";
      case DISCONNECTED:
        this.readyState = CONNECTING;
        this.mq.connect();
        if (callback != null) {
          this.mq.on('connected', function() {
            return callback(null);
          });
        }
        break;
      default:
        this.readyState = CONNECTING;
        this.connectHelper(callback);
    }
    if (this.mq.autoReconnect) {
      return this.mq.once('disconnected', function() {
        return _this.mq.once('connected', function() {
          return _this.reconnectHelper();
        });
      });
    }
  };

  Bongo.prototype.disconnect = function(shouldReconnect, callback) {
    if ('function' === typeof shouldReconnect) {
      callback = shouldReconnect;
      shouldReconnect = false;
    }
    if (this.readyState === NOTCONNECTED || this.readyState === DISCONNECTED) {
      return "already disconnected";
    }
    if (callback != null) {
      this.mq.once('disconnected', callback.bind(this));
    }
    this.mq.disconnect(shouldReconnect);
    return this.readyState = DISCONNECTED;
  };

  Bongo.prototype.messageFailed = function(message) {
    return console.log('MESSAGE FAILED', message);
  };

  Bongo.prototype.getTimeout = function(message, clientTimeout) {
    if (clientTimeout == null) {
      clientTimeout = 5000;
    }
    return setTimeout(this.messageFailed.bind(this, message), clientTimeout);
  };

  Bongo.prototype.ping = function(callback) {
    if (this.readyState === CONNECTED) {
      return this.send('ping', callback);
    }
  };

  Bongo.prototype.send = function(method, args) {
    var scrubber,
      _this = this;
    if (!Array.isArray(args)) {
      args = [args];
    }
    if (!this.channel) {
      throw new Error('No channel!');
    }
    scrubber = new Scrubber(this.localStore);
    return scrubber.scrub(args, function() {
      var message, messageString;
      message = scrubber.toDnodeProtocol();
      message.method = method;
      message.sessionToken = _this.getSessionToken();
      message.userArea = _this.getUserArea();
      messageString = JSON.stringify(message);
      if (_this.channel.isOpen) {
        return _this.channel.publish(messageString);
      } else {
        _this.lastMessage = messageString;
        return _this.connect();
      }
    });
  };

  Bongo.prototype.authenticateUser = function() {
    var clientId;
    clientId = this.getSessionToken();
    return this.send('authenticateUser', [clientId, this.bound('changeLoggedInState')]);
  };

  Bongo.prototype.handshakeDone = function() {
    this.api || (this.api = this.createRemoteApiShims(REMOTE_API));
    this.readyState = CONNECTED;
    this.emit('ready');
    return this.authenticateUser();
  };

  Bongo.prototype.defineApi = function(api) {
    this.api = this.createRemoteApiShims(api);
    return this.handshakeDone();
  };

  Bongo.prototype.changeLoggedInState = function(state) {
    return this.emit('loggedInStateChanged', state);
  };

  Bongo.prototype.updateSessionToken = function(token) {
    return this.emit('sessionTokenChanged', token);
  };

  Bongo.prototype.fetchChannel = function(channelName, callback) {
    var channel;
    channel = this.mq.subscribe(channelName);
    return channel.once('broker.subscribed', function() {
      return callback(channel);
    });
  };

  Bongo.prototype.use = function(fn) {
    return this.stack.push(fn);
  };

  Bongo.prototype.monitorPresence = function(callbacks) {
    return this.send('monitorPresence', callbacks);
  };

  Bongo.prototype.subscribe = function(name, options, callback) {
    var channel;
    if (options == null) {
      options = {};
    }
    if (options.serviceType == null) {
      options.serviceType = 'application';
    }
    channel = this.mq.subscribe(name, options);
    channel.setAuthenticationInfo({
      serviceType: options.serviceType,
      group: options.group,
      name: name,
      clientId: this.getSessionToken()
    });
    if (callback != null) {
      channel.once('broker.subscribed', function() {
        return callback(channel);
      });
    }
    return channel;
  };

  return Bongo;

})(EventEmitter);

if (!isBrowser && module) {
  module.exports = Bongo;
} else if (typeof window !== "undefined" && window !== null) {
  window['Bongo'] = Bongo;
}
